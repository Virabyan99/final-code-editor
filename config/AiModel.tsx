const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};
const CodeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};


  export const chatSession = model.startChat({
    generationConfig,
    history: [
    ],
  });

  export const GenAiCode = model.startChat({
    generationConfig: CodeGenerationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "Generate to do app: Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHereâ€™s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n  "},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"projectTitle\": \"Simple To-Do App\",\n  \"explanation\": \"This project is a basic to-do application built with React and styled using Tailwind CSS. It allows users to add, edit, complete, and delete tasks. The application uses components for better organization, such as a task input form, a task list, and individual task items. The application is designed to be responsive and have a clean, user-friendly interface. Icons from the lucide-react library are used to enhance the visual appeal and functionality of the app and date-fns is used for date related data.\",\n    \"files\": {\n        \"/App.js\": {\n            \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TaskList from './components/TaskList';\\nimport TaskInput from './components/TaskInput';\\nimport { Clock } from 'lucide-react';\\n\\nfunction App() {\\n  const [tasks, setTasks] = useState(() => {\\n    const savedTasks = localStorage.getItem('tasks');\\n    return savedTasks ? JSON.parse(savedTasks) : [];\\n  });\\n  \\n    useEffect(() => {\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (newTask) => {\\n    setTasks([...tasks, {...newTask, id: Date.now(), completed: false}]);\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTasks(tasks.map(task => task.id === id ? {...task, completed: !task.completed} : task));\\n  };\\n\\n  const deleteTask = (id) => {\\n      setTasks(tasks.filter(task => task.id !== id));\\n  };\\n\\n  const editTask = (id, updatedTask) => {\\n        setTasks(tasks.map(task => task.id === id ? {...task, ...updatedTask} : task));\\n  };\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100 flex items-center justify-center\\\">\\n      <div className=\\\"bg-white shadow-lg rounded-lg p-8 w-full max-w-md\\\">\\n      <div className=\\\"flex items-center justify-between mb-6\\\">\\n        <h1 className=\\\"text-2xl font-semibold text-gray-800\\\"><Clock className=\\\"inline-block mr-2\\\" size={24} />My To-Do List</h1>\\n      </div>\\n        <TaskInput onAddTask={addTask} />\\n        <TaskList tasks={tasks} onToggleComplete={toggleComplete} onDeleteTask={deleteTask} onEditTask={editTask}/>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\"\n        },\n      \"/components/TaskInput.js\": {\n          \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nconst TaskInput = ({ onAddTask }) => {\\n  const [taskName, setTaskName] = useState('');\\n  const [dueDate, setDueDate] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n      if (taskName.trim() !== '') {\\n          onAddTask({ name: taskName, dueDate: dueDate });\\n          setTaskName('');\\n          setDueDate('');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"mb-4 flex items-center space-x-2\\\">\\n        <input\\n        type=\\\"text\\\"\\n        value={taskName}\\n        onChange={(e) => setTaskName(e.target.value)}\\n          placeholder=\\\"Add task...\\\"\\n          className=\\\"flex-grow border p-2 rounded focus:ring focus:ring-blue-300 outline-none\\\"\\n      />\\n       <input\\n        type=\\\"date\\\"\\n        value={dueDate}\\n        onChange={(e) => setDueDate(e.target.value)}\\n        className=\\\"border p-2 rounded focus:ring focus:ring-blue-300 outline-none\\\"\\n       />\\n      <button type=\\\"submit\\\" className=\\\"bg-blue-500 text-white p-2 rounded hover:bg-blue-600 focus:outline-none focus:ring focus:ring-blue-300\\\">\\n        <Plus className=\\\"inline-block\\\" size={20} />\\n      </button>\\n    </form>\\n  );\\n};\\n\\nexport default TaskInput;\"\n      },\n      \"/components/TaskList.js\": {\n        \"code\": \"import React from 'react';\\nimport TaskItem from './TaskItem';\\n\\nconst TaskList = ({ tasks, onToggleComplete, onDeleteTask, onEditTask }) => {\\n  return (\\n    <ul className=\\\"space-y-2\\\">\\n      {tasks.map(task => (\\n        <TaskItem \\n          key={task.id}\\n          task={task}\\n          onToggleComplete={onToggleComplete}\\n          onDeleteTask={onDeleteTask}\\n          onEditTask={onEditTask}\\n        />\\n      ))}\\n    </ul>\\n  );\\n};\\n\\nexport default TaskList;\"\n      },\n        \"/components/TaskItem.js\": {\n            \"code\": \"import React, { useState } from 'react';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nconst TaskItem = ({ task, onToggleComplete, onDeleteTask, onEditTask }) => {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editedTaskName, setEditedTaskName] = useState(task.name);\\n  const [editedDueDate, setEditedDueDate] = useState(task.dueDate);\\n\\n  const handleEdit = () => {\\n      setIsEditing(true);\\n  };\\n\\n  const handleCancelEdit = () => {\\n    setIsEditing(false);\\n    setEditedTaskName(task.name);\\n      setEditedDueDate(task.dueDate);\\n  };\\n\\n  const handleSaveEdit = () => {\\n    onEditTask(task.id, { name: editedTaskName, dueDate: editedDueDate });\\n      setIsEditing(false);\\n  };\\n  const formatDate = (dateString) => {\\n    if (!dateString) return 'No Due Date';\\n    try {\\n       const date = new Date(dateString);\\n      return format(date, 'MMM dd, yyyy');\\n    } catch (e) {\\n        return 'Invalid Date';\\n    }\\n  };\\n  \\n  return (\\n    <li className={`flex items-center justify-between p-3 bg-white rounded shadow-sm hover:shadow-md transition-shadow duration-200 ${task.completed ? 'opacity-50 line-through' : ''}`}>\\n      {isEditing ? (\\n        <div className=\\\"flex flex-grow items-center space-x-2\\\">\\n          <input\\n              type=\\\"text\\\"\\n              value={editedTaskName}\\n              onChange={(e) => setEditedTaskName(e.target.value)}\\n              className=\\\"border p-1 rounded flex-grow\\\"\\n          />\\n           <input\\n              type=\\\"date\\\"\\n              value={editedDueDate}\\n               onChange={(e) => setEditedDueDate(e.target.value)}\\n             className=\\\"border p-1 rounded\\\"\\n           />\\n           \\n          <button onClick={handleSaveEdit} className=\\\"bg-green-500 text-white p-1 rounded hover:bg-green-600\\\">\\n              <Check className=\\\"inline-block\\\" size={16}/>\\n          </button>\\n          <button onClick={handleCancelEdit} className=\\\"bg-red-500 text-white p-1 rounded hover:bg-red-600\\\">\\n             <X className=\\\"inline-block\\\" size={16}/>\\n           </button>\\n         \\n        </div>\\n      ) : (\\n        <div className=\\\"flex flex-grow items-center space-x-2\\\">\\n         <input\\n            type=\\\"checkbox\\\"\\n              checked={task.completed}\\n              onChange={() => onToggleComplete(task.id)}\\n           className=\\\"mr-2\\\"\\n          />\\n         \\n           <span>{task.name}</span>\\n          {task.dueDate && <span className='text-gray-500 text-sm'>({formatDate(task.dueDate)})</span>}\\n        </div>\\n      )}\\n      \\n    \\n      <div className='flex space-x-2'>\\n        {!isEditing && (\\n         <button onClick={handleEdit} className=\\\"text-gray-600 hover:text-gray-800 focus:outline-none\\\">\\n          <Edit className=\\\"inline-block\\\" size={20}/>\\n           </button>\\n        )}\\n           <button onClick={() => onDeleteTask(task.id)} className=\\\"text-red-500 hover:text-red-700 focus:outline-none\\\">\\n             <Trash className=\\\"inline-block\\\" size={20}/>\\n           </button>\\n      </div>\\n    </li>\\n  );\\n};\\n\\nexport default TaskItem;\"\n        }\n    },\n  \"generatedFiles\": [\n    \"/App.js\",\n      \"/components/TaskInput.js\",\n    \"/components/TaskList.js\",\n    \"/components/TaskItem.js\"\n  ]\n}\n```\n"},
        ],
      },
    ],
  })

  // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
  // console.log(result.response.text());


